package JavaProgram;
import java.util.*;
public class Main {
	public static void main(String args[])
	{
		System.out.println("**************************Welcome to My Quiz App**************************");
        ArrayList<Question> javaQuestions = new ArrayList<>();
        javaQuestions.add(new Question("What is the primary purpose of the 'finally' block in Java?", new ArrayList<>(List.of("To handle exceptions", "To clean up resources", "To define global variables", "To declare methods")), "To clean up resources"));
        javaQuestions.add(new Question("What is the default value of the local variables in Java?", new ArrayList<>(List.of("0", "Null", "Depends on the variable type", "Garbage value")), "Depends on the variable type"));
        javaQuestions.add(new Question("What is the difference between '=='' and '.equals()' in Java?", new ArrayList<>(List.of("They are the same", "==' compares object references, '.equals()' compares content", "'.equals()' compares object references, '==' compares content", "There is no difference")), "==' compares object references, '.equals()' compares content"));
        javaQuestions.add(new Question("What is the purpose of the 'static' keyword in Java?", new ArrayList<>(List.of("To make a variable non-modifiable", "To make a variable common to all instances of a class", "To make a variable modifiable only within the same package", "To make a variable accessible from any class")), "To make a variable common to all instances of a class"));
        javaQuestions.add(new Question("What is the difference between 'public', 'protected', 'default', and 'private' access modifiers in Java?", new ArrayList<>(List.of("They are the same", "Different levels of visibility within the same package", "Different levels of visibility outside the package", "Different levels of visibility within and outside the package")), "Different levels of visibility within and outside the package"));
        javaQuestions.add(new Question("What is the Java Virtual Machine (JVM)?", new ArrayList<>(List.of("A hardware component", "A software component", "An operating system", "A programming language")), "A software component"));
        javaQuestions.add(new Question("What is the purpose of the 'super' keyword in Java?", new ArrayList<>(List.of("To call the superclass constructor", "To refer to the current instance of the class", "To call a method in the superclass", "To access the superclass variables")), "To call a method in the superclass"));
        javaQuestions.add(new Question("What is the purpose of the 'this' keyword in Java?", new ArrayList<>(List.of("To refer to the current instance of the class", "To call a method in the current class", "To access the superclass variables", "To call the superclass constructor")), "To refer to the current instance of the class"));
        javaQuestions.add(new Question("What is the Java API?", new ArrayList<>(List.of("A programming language", "A set of classes and interfaces for Java programming", "An operating system", "A virtual machine")), "A set of classes and interfaces for Java programming"));
        javaQuestions.add(new Question("What is the purpose of the 'final' keyword in Java?", new ArrayList<>(List.of("To make a variable non-modifiable", "To make a variable modifiable only within the same package", "To make a variable common to all instances of a class", "To make a variable accessible from any class")), "To make a variable non-modifiable"));
        javaQuestions.add(new Question("What is the role of the 'break' statement in Java?", new ArrayList<>(List.of("To exit a loop or switch statement", "To skip the current iteration of a loop", "To jump to the next iteration of a loop", "To terminate the program")), "To exit a loop or switch statement"));
        javaQuestions.add(new Question("What is the purpose of the 'try', 'catch', and 'finally' blocks in exception handling?", new ArrayList<>(List.of("To handle exceptions", "To declare variables", "To define methods", "To create objects")), "To handle exceptions"));
        javaQuestions.add(new Question("What is the difference between 'ArrayList' and 'LinkedList' in Java?", new ArrayList<>(List.of("They are the same", "'ArrayList' uses linked nodes, 'LinkedList' uses an array", "'ArrayList' uses an array, 'LinkedList' uses linked nodes", "'ArrayList' is faster than 'LinkedList'")), "'ArrayList' uses an array, 'LinkedList' uses linked nodes"));
        javaQuestions.add(new Question("What is the purpose of 'Thread.sleep()' in Java?", new ArrayList<>(List.of("To stop the execution of a thread", "To make a thread sleep for a specified time", "To terminate a thread", "To start a new thread")), "To make a thread sleep for a specified time"));
        javaQuestions.add(new Question("What is the difference between 'HashMap' and 'HashTable' in Java?", new ArrayList<>(List.of("They are the same", "'HashMap' is synchronized, 'HashTable' is not synchronized", "'HashTable' is synchronized, 'HashMap' is not synchronized", "'HashMap' is faster than 'HashTable'")), "'HashTable' is synchronized, 'HashMap' is not synchronized"));
        javaQuestions.add(new Question("What is the purpose of the 'volatile' keyword in Java?", new ArrayList<>(List.of("To make a variable non-modifiable", "To make a variable modifiable only within the same package", "To make a variable common to all instances of a class", "To ensure visibility of changes across threads")), "To ensure visibility of changes across threads"));
        javaQuestions.add(new Question("What is the role of 'interface' in Java?", new ArrayList<>(List.of("To define a blueprint of a class", "To create objects", "To handle exceptions", "To access the superclass variables")), "To define a blueprint of a class"));
        javaQuestions.add(new Question("What is garbage collection in Java?", new ArrayList<>(List.of("A way to remove unused objects and free up memory", "A process of compiling Java code", "A method for handling exceptions", "A type of exception")), "A way to remove unused objects and free up memory"));
        javaQuestions.add(new Question("What is the purpose of 'try-with-resources' statement in Java?", new ArrayList<>(List.of("To handle exceptions", "To declare variables", "To release resources automatically", "To define methods")), "To release resources automatically"));
        javaQuestions.add(new Question("What is the concept of 'method overloading' in Java?", new ArrayList<>(List.of("The ability of a class to inherit from multiple classes", "The ability of a class to have multiple methods with the same name", "The ability of a class to access the members of another class", "The ability of a class to override a method in its superclass")), "The ability of a class to have multiple methods with the same name"));
        javaQuestions.add(new Question("How does 'JavaBeans' differ from 'POJO' (Plain Old Java Object)?", new ArrayList<>(List.of("They are the same", "'JavaBeans' is a reusable software component, 'POJO' is a term for any Java object", "'POJO' is a reusable software component, 'JavaBeans' is a term for any Java object", "'JavaBeans' is faster than 'POJO'")), "'JavaBeans' is a reusable software component, 'POJO' is a term for any Java object"));
        javaQuestions.add(new Question("What is the purpose of 'JDBC' in Java?", new ArrayList<>(List.of("To handle exceptions", "To connect Java applications to a relational database", "To create graphical user interfaces", "To define global variables")), "To connect Java applications to a relational database"));
        Quiz quiz = new Quiz(javaQuestions);
        quiz.get_Student_Info();
        quiz.startQuiz();
	}
}
